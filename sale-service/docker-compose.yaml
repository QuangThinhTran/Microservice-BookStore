services:

  db:
    container_name: db-sale-service
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
      - db-store:/var/lib/mysql
    networks:
      - sale-store-network

  backend:
    container_name: backend-sale-service
    build:
      context: .
      dockerfile: Dockerfile
    image: sale-service:latest
    ports:
      - "9000:80"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    working_dir: /var/www/sale-service
    volumes:
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - .:/var/www/sale-service
    networks:
      - sale-store-network

  nginx:
    container_name: nginx-sale-service
    image: nginx:latest
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - .:/var/www/sale-service
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - sale-store-network

volumes:
  db-store:

networks:
  sale-store-network:
    driver: bridge
